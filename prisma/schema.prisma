// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Session {
  id           String         @id @default(cuid())
  key          String         @unique
  value        String
  File         File[]
  Message      Message[]
  Subscription Subscription[]
}

model Document {
  id      String                 @id @default(cuid())
  content String
  vector  Unsupported("vector")?
  File    File                   @relation(fields: [fileId], references: [id])
  fileId  String
}

model File {
  id   String @id @default(cuid())
  name String

  url      String
  messages Message[]

  documentId String?
  Document   Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model Message {
  id String @id @default(cuid())

  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  File   File   @relation(fields: [fileId], references: [id])
  fileId String

  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model Subscription {
  id        String   @id @default(cuid())
  price     Price    @relation(fields: [priceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endedAt   DateTime
  priceId   Int
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
}

enum SubscriptionPlan {
  ONE_MONTH
  THREE_MONTH
  ONE_YEAR
}

model Price {
  id           Int              @id @default(autoincrement())
  plan         SubscriptionPlan
  price        Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  Subscription Subscription[]
}
